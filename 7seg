;*******************************************************************
;* Universidad Nacional de Colombia                                *
;* Facultad de ingeniería mecánica y mecatrónica                   *
;* Microcontroladores 2018-I                                       *
;* Programador:                                                    *
;* -Javier Mauricio Pinilla Garcia  25481244                       *
;* -Sebastian Cepeda Espinosa                                      *
;* Version: 1.0                                                    *
;* Microcontrolador: MC9S08QG8CPBE                                 *
;* Codigo para usar 4 display 7 segmento con el fin de implementar *
;* un reloj y un calendario cuyo cambio esta dado por IRQ          *
;*******************************************************************

; Include derivative-specific definitions
            INCLUDE 'derivative.inc'
            

; export symbols
            XDEF _Startup, main, intirq
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on
            
            
            
            XREF __SEG_END_SSTACK   ; symbol defined by the linker for the end of the stack


; variable/data section
MY_ZEROPAGE: SECTION  SHORT         ; Insert here your data definition

estado:       ds.b   1
minh:		  ds.b   1
minl:		  ds.b   1
horah:		  ds.b   1
horal:		  ds.b   1
diah:		  ds.b   1
dial:		  ds.b   1
mesh:		  ds.b   1
mesl:		  ds.b   1


Acnoledge: 	 SECTION
acka:		  ds.b   1
ackb:		  ds.b   1
ackc:		  ds.b   1
ackd:		  ds.b   1

Aux:		 SECTION
seg:	      ds.b	 1
seg_aux:	  ds.b	 1
segundos:	  ds.b   1
Javier:   SECTION
; ================= RUtina  de Interrupcion por IRQ

intirq:	
		pshh
        bset  IRQSC_IRQACK,IRQSC   ; Reconocimiento de int y forza la bandera a 0.
        bclr	  IRQSC_IRQIE,IRQSC
        jsr retardo
        jsr retardo
        jsr retardo
        jsr retardo
irq_1:	brclr 5,PTAD,irq_1        
		lda #$01
		cmp	estado
		beq st1
		bne	st2
		
st1:	lda #$00
		sta	estado
		bra finirq
		
st2:	lda #$01
		sta	estado
		bra finirq
		
finirq: bset IRQSC_IRQIE,IRQSC
		pulh
		rti	
; =============== Main Program ==========================
ProgMain:  SECTION
main:
_Startup:
            LDHX   #__SEG_END_SSTACK ; initialize the stack pointer
            TXS
			bsr init
			; ========= Rutina configuracion de IRQ
             jsr   conf_IRQ  

; ========= Habilita procesar interrupciones
             CLI			; enable interrupts              
              
		

mainLoop:
            ; Insert your code here
			
r1:			
			jsr	  escritura
			jsr	  verif
			jsr   verif_digito
			jsr	  segundo
			
			jmp	  r1
            
            
init:
			lda   #$52
			sta   SOPT1 ; Desactivar watchdog y BKGD como PTA4
			lda   #%00011111
			sta   PTADD
			lda   #%11110000
			sta   PTBDD
			lda   #%00100000
			sta   PTAPE
			lda   #%00001111
			sta   PTBPE
			lda	  #$00
			sta	  seg
			sta	  seg_aux
			sta   segundos			
			lda	  #$01
			sta   estado
			
			lda	  #$00
			sta   minh
			lda	  #$00
			sta   minl
			lda   #$00
			sta   horah
			lda	  #$09
			sta   horal
			lda	  #$01
			sta   diah
			lda	  #$04
			sta   dial
			lda	  #$00
			sta   mesh
			lda	  #$03
			sta   mesl
			lda	  #$00
			sta   acka
			lda	  #$00
			sta   ackb
			lda	  #$00
			sta   ackc
			lda	  #$00
			sta   ackd
			rts		
			
retardo: 	
			lda		#$01
rt1:		psha
			lda		#$ff
rt2:		
			dbnza	rt2
			pula
			dbnza	rt1
			rts

;23456789012345678901234567890123456789012345
escritura:  lda   #$01
			cmp   estado
			beq	  wfecha
			bne	  whora
escfin:		rts
	  
wfecha:		lda	  #%00000001
			sta	  PTAD
			lda	  mesh
			jsr   escnum
			jsr   retardo
			lda	  #%00000010
			sta	  PTAD
			lda	  mesl
			jsr   escnum
			 
			jsr   retardo
			 
			lda	  #%00000100
			sta	  PTAD
			lda	  diah
			jsr   escnum
			 
			jsr   retardo
			 
			lda	  #%00001000
			sta	  PTAD
			lda	  dial
			jsr   escnum
			 
			jsr   retardo
			 
			jmp   escfin
			
whora:		lda	  #%00000001
			sta	  PTAD
			lda	  horah
			jsr   escnum
			 
			jsr   retardo
			 
			lda	  #%00000010
			sta	  PTAD
			lda	  horal
			jsr   escnum
			 
			jsr   retardo
			 
			lda	  #%00000100
			sta	  PTAD
			lda	  minh
			jsr   escnum
			 
			jsr   retardo
			 
			lda	  #%00001000
			sta	  PTAD
			lda	  minl
			jsr   escnum
			 
			jsr   retardo
			 
			jmp   escfin	

escnum:		cmp	  #$00
			beq   esc0
n1:			cmp	  #$01
			beq   esc1
n2:			cmp	  #$02
			beq   esc2
n3:			cmp	  #$03
			beq   esc3
n4:			cmp	  #$04
			beq   esc4
n5:			cmp	  #$05
			beq   esc5
n6:			cmp	  #$06
			beq   esc6
n7:			cmp	  #$07
			beq   esc7
n8:			cmp	  #$08
			beq   esc8
n9:			cmp	  #$09
			beq   esc9
nf:			rts	
		
;23456789012345678901234567890123456789012345
esc0:       lda   PTBD 			;Escribir 8b0000xxxx
			and   #%00001111
			sta	  PTBD	
			jmp   n1
				
esc1: 		lda   PTBD 			;Escribir 8b0001xxxx
			and   #%00001111
			ora   #%00010000
			sta	  PTBD	
			jmp   n2
			
esc2:		lda   PTBD 			;Escribir 8b0010xxxx
			and   #%00001111
			ora   #%00100000
			sta	  PTBD	
			jmp   n3
 
esc3:		lda   PTBD 			;Escribir 8b0011xxxx
			and   #%00001111
			ora   #%00110000
			sta	  PTBD	
			jmp   n4
			
esc4:		lda   PTBD 			;Escribir 8b0100xxxx
			and   #%00001111
			ora   #%01000000
			sta	  PTBD	
			jmp   n5
 
esc5:		lda   PTBD 			;Escribir 8b0101xxxx
			and   #%00001111
			ora   #%01010000
			sta	  PTBD	
			jmp   n6
 
esc6:		lda   PTBD 			;Escribir 8b0110xxxx
			and   #%00001111
			ora   #%01100000
			sta	  PTBD	
			jmp   n7
 
esc7:		lda   PTBD 			;Escribir 8b0111xxxx
			and   #%00001111
			ora   #%01110000
			sta	  PTBD	
			jmp   n8
 
esc8: 		lda   PTBD 			;Escribir 8b1000xxxx
			and   #%00001111
			ora   #%10000000
			sta	  PTBD	
			jmp   n9
	
esc9: 		lda   PTBD 			;Escribir 8b1000xxxx
			and   #%00001111
			ora   #%10010000
			sta	  PTBD	
			jmp   nf

verif:							;Función para verificar el estado de las entradas de los pulsadores
			lda	  #%00000001	;Verificación de cambios en el pulsador1 PTB0 
			and   PTBD
			cmp	  #%00000000
			beq	  aug1			
			bne	  verack1 
v1:			lda	  #%00000010	;Verificación de cambios en el pulsador2 PTB1 
			and   PTBD
			cmp	  #%00000000
			beq	  aug2
			bne	  verack2 	
v2:			lda	  #%00000100	;Verificación de cambios en el pulsador3 PTB2 
			and   PTBD
			cmp	  #%00000000
			beq	  aug3
			bne	  verackc 	
v3:			lda	  #%00001000	;Verificación de cambios en el pulsador4 PTB3 
			and   PTBD
			cmp	  #%00000000
			beq	  aug4
			bne	  verack4 			
veriffin:	rts
								; Para el pulsador 1
aug1:		lda   acka			;Verificación para evitar repetición de aumento del registro
			cmp	  #$00
			beq   a1	
aug1r:		jmp   v1
								; Para el pulsador 2:
aug2:		lda   #$00			;Verificación para evitar repetición de aumento del registro
			cmp	  ackb
			beq   a2	
aug2r:		jmp   v2
								; Para el pulsador 3:
aug3:		lda   ackc			;Verificación para evitar repetición de aumento del registro
			cmp	  #$00	
			beq   a3	
aug3r:		jmp   v3
								; Para el pulsador 4:
aug4:		lda   ackd			;Verificación para evitar repetición de aumento del registro
			cmp	  #$00
			beq   a4	
aug4r:		jmp   veriffin
verack1:    lda   acka			;subrutina de limpieza de acknoledge para el pulsador dado
			cmp	  #$01
			beq   vack1
			bne	  v1
verack1r:	jmp	  v1
verack2:    lda   ackb			;subrutina de limpieza de acknoledge para el pulsador dado
			cmp	  #$01	
			beq   vack2
			bne	  v2
verack2r:	jmp	  v2
verackc:    lda   ackc			;subrutina de limpieza de acknoledge para el pulsador dado
			cmp	  #$01
			beq   vackc
			bne	  v3
verackcr:	jmp	  v3
verack4:    lda   ackd		;subrutina de limpieza de acknoledge para el pulsador dado
			cmp	  #$01
			beq   vack4
			bne   veriffin
verack4r:	jmp	  veriffin
vack1:		lda   #$00
			sta	  acka
			jmp	  verack1r
vack2:		lda   #$00
			sta	  ackb
			jmp	  verack2r
vackc:		lda   #$00
			sta	  ackc
			jmp	  verackcr
vack4:		lda   #$00
			sta	  ackd
			jmp	  verack4r
a1:         lda   estado		;subrutina de selección de registro para aumento según estado
			cmp	  #$01
			beq	  a1fecha
			bne	  a1hora	  
a1r:		jmp	  aug1r
a2:         lda   estado		;subrutina de selección de registro para aumento según estado
			cmp	  #$01
			beq	  a2fecha
			bne	  a2hora	  
a2r:		jmp	  aug2r
a3:         lda   estado		;subrutina de selección de registro para aumento según estado
			cmp	  #$01
			beq	  a3fecha
			bne	  a3hora	  
a3r:		jmp	  aug3r
a4:         lda   estado		;subrutina de selección de registro para aumento según estado
			cmp	  #$01
			beq	  a4fecha
			bne	  a4hora	  
a4r:		jmp	  aug4r
a1fecha:	lda	  mesh			;subrutina de aumento del registro fecha para el pin dado
			add	  #$01
			sta	  mesh	
			lda   #$01
			sta	  acka
			jmp   a1r
a1hora:		lda	  horah			;subrutina de aumento del registro hora para el pin dado
			add	  #$01
			sta	  horah	
			lda   #$01
			sta	  acka
			jmp   a1r
a2fecha:	lda	  mesl			;subrutina de aumento del registro fecha para el pin dado
			add	  #$01
			sta	  mesl	
			lda   #$01
			sta	  ackb
			jmp   a2r
a2hora:		lda	  horal			;subrutina de aumento del registro hora para el pin dado
			add	  #$01
			sta	  horal	
			lda   #$01
			sta	  ackb
			jmp   a2r
a3fecha:	lda	  diah			;subrutina de aumento del registro fecha para el pin dado
			add	  #$01
			sta	  diah	
			lda   #$01
			sta	  ackc
			jmp   a3r
a3hora:		lda	  minh			;subrutina de aumento del registro hora para el pin dado
			add	  #$01
			sta	  minh	
			lda   #$01
			sta	  ackc
			jmp   a3r
a4fecha:	lda	  dial			;subrutina de aumento del registro fecha para el pin dado
			add	  #$01
			sta	  dial	
			lda   #$01
			sta	  ackd
			jmp   a4r
a4hora:		lda	  minl			;subrutina de aumento del registro hora para el pin dado
			add	  #$01
			sta	  minl	
			lda   #$01
			sta	  ackd
			jmp   a4r
			

			
verif_digito:
			lda   #$0A			;carga 10 al acumulador
			cmp   minl			;compara con minl
			bne	  vd1			;si es diferente va a vd1
			lda   #$00			;si minl==10
			sta	  minl			;minl=0
			lda	  minh			;carga minh al acumulador
			add	  #$01			;suma 1 al acumulador
			sta   minh			;carga a minh el acumulador
			
vd1:		lda   #$0A			;carga 10 al acumulador
			cmp   dial			;compara con dial
			bne   vd2			;si es diferente va a vd2
			lda   #$00			;si dial==10
			sta	  dial			;dial=0
			lda	  diah			;carga diah al acumulador
			add   #$01			;suma 1 al acumulador
			sta   diah			;carga a diah el acumulador
			
vd2:		lda #$0A			;carga 10 al acumulador
			cmp horal			;compara con horal
			bne	vd3				;si es diferente va a vd3
			lda #$00			;si horal==10
			sta	horal			;horal=0
			lda	horah			;carga horah al acumulador
			add	#$01			;suma 1 al acumulador
			sta horah			;carga a horah el acumulador
			
vd3:		lda #$0A			;carga 10 al acumulador
			cmp mesl			;compara con mesl
			bne	vd4				;si es diferente va a vd4
			lda #$00			;si mesl==10
			sta	mesl			;mesl=0
			lda	mesh			;carga mesh al acumulador
			add	#$01			;suma 1 al acumulador
			sta mesh			;carga a mesh el acumulador
			
vd4:		lda #$03			;carga 3 al acumulador
			cmp diah			;compara con diah
			bne	vd5				;si es diferente va a vd5
			lda #$00			;si diah==3
			sta	diah			;diah=0
			lda #$01
			sta dial			;dial=1
			lda	mesl			;carga mesl al acumulador
			add	#$01			;suma 1 al acumulador
			sta mesl			;carga a mesl el acumulador
			
vd5:		lda #$06			;carga 6 al acumulador
			cmp minh			;compara con minh
			bne	vd6				;si es diferente va a vd6
			lda #$00		    ;si minh==6
			sta	minh			;minh=0
			lda	horal			;carga horal al acumulador
			add	#$01			;suma 1 al acumulador
			sta horal			;carga a horal el acumulador
			
			
vd6:		lda #$02			;carga 2 al acumulador
			cmp horah			;compara con horah
			bne	vd7				;si es diferente va a vd7
								;si horah==2
			lda #$04			;carga 4 al acumulador
			cmp	horal			;compara con horal
			bne	vd7				;si es diferente va a vd7
			lda #$00			;si horal==4
			sta horah			;horah=0
			sta horal			;horal=0
			sta minh			;minh=0
			sta minl				;minl=0
					
			
vd7:		lda #$01			;carga 1 al acumulador
			cmp mesh			;compara con mesh
			bne	sr1				;si es diferente va a sr1
			lda #$02			;carga 2 al acumulador
			cmp	mesl			;compara con mesl
			bne	sr1			    ;si es diferente va a sr1
								;si mesh=1 y mesl=2
			lda #$00			;carga 0 al acumulador
			sta mesh			;mesh=0
			sta diah			;diah=0
			lda #$01			;carga 1 al acumulador
			sta	mesl			;mesl=1
			sta dial			;dial=1
			jmp r1	
			
			
sr1:		rts
;****************************************************************************:
; rutna para establecer el segundero del sistema                             ;
; la ejecución del mainLoop toma 4716 ciclos de bus, el cual opera a 4MHz    ;
; de tal forma se ejecuta 848 veces en un segundo, para efectos de contar    ;
; se decidio dividir dicho valor entre 4 obteniendo 212; asi se procede a la ;
; siguiente rutina                                                           ;
; seg cuenta hasta 212, seg_aux cuenta 4 veces eso, finalmente segundos	     ;
; cuenta los segundos transcurridos					     ;
;****************************************************************************;																			 ;
segundo:	lda #%11010100		;carga 212 al acumulador
			cmp seg				;compara con segundo
			beq aum_seg_aux		;si es igual va a aum_seg_aux
			lda seg				;si no es igual
			add #$01			;incrementa en 1 seg
			sta seg
			rts
aum_seg_aux:
			lda #$00  			
			sta seg				;asigna 0 a seg
			lda #$04			
			cmp seg_aux			; compara seg_aux con 4
			beq cambio_seg		;si es igual va a cambio_seg
			lda seg_aux			
			add #$01
			sta seg_aux			;incrementa en 1 seg_aux
			rts
			
cambio_seg: lda #$00
			sta	seg_aux			;asigna 0 a seg_aux
			lda segundos
			add	#$01
			sta	segundos		;incrementa en 1 segundos
			
			brclr 4,PTAD,stx2	;si PTA4== 0 va a stx2
			brset 4,PTAD,stx1	;si PTA4== 0 va a stx1
		
stx1:		bclr 4,PTAD			;PTA4=0	
			jmp stx3			;va a stx3
		
stx2:		bset 4,PTAD			;PTA4=1
			jmp stx3			;va a stx3

stx3:		lda #$3C			
			cmp segundos		;compara segundos con 60
			bra	stx4			;si es igual va a stx4
			jmp r1				;si no vuelve a r1

stx4:		lda minl			
			add	#$01
			sta	minl			;suma 1 a minl
			jmp r1				;vuelve a r1
			
		
			

****************************************************************
;Subrutina de configuraciÛn del Modulo IRQ
conf_IRQ:     ; Label de la Interrupción
              ; 76543210 Bits
        lda   #%01010011
              ; ||||||||
              ; |||||||+--------- IRQMODE  = Flanco de Bajada
              ; ||||||+---------- IRQIE = IRQ habilitada
              ; |||||+----------- IRQACK = Para reconocimiento
              ; ||||+------------ IRQF  = Solo lectura
              ; |||+------------- IRQPE = Pin Habilitado disponible .
              ; ||+-------------- No Disponible
              ; |+--------------- IRQPDD =
              ; +---------------- NO disponible
         sta   IRQSC  ; Configura la Interrupción     
         rts     ;Retorno de subrutina de IRQ
;****************************************************************
			

			
			
			
			


