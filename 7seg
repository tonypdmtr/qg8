;*******************************************************************
;* This stationery serves as the framework for a user application. *
;* For a more comprehensive program that demonstrates the more     *
;* advanced functionality of this processor, please see the        *
;* demonstration applications, located in the examples             *
;* subdirectory of the "Freescale CodeWarrior for HC08" program    *
;* directory.                                                      *
;*******************************************************************
;*******************************************************************
;* This stationery serves as the framework for a user application. *
;* For a more comprehensive program that demonstrates the more     *
;* advanced functionality of this processor, please see the        *
;* demonstration applications, located in the examples             *
;* subdirectory of the "Freescale CodeWarrior for HC08" program    *
;* directory.                                                      *
;*******************************************************************

; Include derivative-specific definitions
            INCLUDE 'derivative.inc'
            

; export symbols
            XDEF _Startup, main, intirq
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on
            
            
            
            XREF __SEG_END_SSTACK   ; symbol defined by the linker for the end of the stack


; variable/data section
MY_ZEROPAGE: SECTION  SHORT         ; Insert here your data definition

estado:       ds.b   1
minh:		  ds.b   1
minl:		  ds.b   1
horah:		  ds.b   1
horal:		  ds.b   1
diah:		  ds.b   1
dial:		  ds.b   1
mesh:		  ds.b   1
mesl:		  ds.b   1

Acnoledge: 	 SECTION
acka:		  ds.b   1
ackb:		  ds.b   1
ack3:		  ds.b   1
ackd:		  ds.b   1

; code section
MyCode:     SECTION

intirq:	
			pshh
			bset IRQSC_IRQACK,IRQSC
			lda #$01
			eor	estado
			sta	estado
			pulh
			rti	


main:
_Startup:
            LDHX   #__SEG_END_SSTACK ; initialize the stack pointer
            TXS

		

mainLoop:
            ; Insert your code here
			jmp init
r1:			
			jsr	  escritura
			jsr	  verif
			;jsr	  verif_digito
			
			jmp	  r1
            
            
init:
			lda   #$52
			sta   SOPT1 ; Desactivar watchdog y BKGD como PTA4
			;lda   #%00010111
			;sta	  IRQSC
			;lda   #%00000001
			;sta	  KBISC
			;lda   #%00000000
			;sta   KBIES
			lda   #%00011111
			sta   PTADD
			lda   #%11110000
			sta   PTBDD
			lda   #%00100000
			sta   PTAPE
			lda   #%00001111
			sta   PTBPE
			;lda   #%11110000;
			;sta   KBIPE
			;lda   #%00000101
			;sta   KBISC
			;lda   #%00000011
			;sta   KBISC
			;lda	  #%11111101
			;and   KBISC
			;ora   #%00000010
			;sta	  KBISC
			;cli 
			
			lda	  #$00
			sta   estado
			lda	  #$00
			sta   minh
			lda	  #$00
			sta   minl
			lda   #$00
			sta   horah
			lda	  #$09
			sta   horal
			lda	  #$01
			sta   diah
			lda	  #$04
			sta   dial
			lda	  #$00
			sta   mesh
			lda	  #$03
			sta   mesl
			lda	  #$00
			sta   acka
			lda	  #$00
			sta   ackb
			lda	  #$00
			sta   ack3
			lda	  #$00
			sta   ackd
			jmp	  r1			
			
retardo: 	
			lda		#$01
rt1:		psha
			lda		#$ff
rt2:		dbnza	rt2
			pula
			dbnza	rt1
			rts

;23456789012345678901234567890123456789012345
escritura:  lda   #$01
			cmp   estado
			beq	  wfecha
			bne	  whora
escfin:		rts
	  
wfecha:		lda	  #%00000001
			sta	  PTAD
			lda	  mesh
			jsr   escnum
			jsr   retardo
			lda	  #%00000010
			sta	  PTAD
			lda	  mesl
			jsr   escnum
			jsr   retardo
			lda	  #%00000100
			sta	  PTAD
			lda	  diah
			jsr   escnum
			jsr   retardo
			lda	  #%00001000
			sta	  PTAD
			lda	  dial
			jsr   escnum
			jsr   retardo
			jmp   escfin
			
whora:		lda	  #%00000001
			sta	  PTAD
			lda	  horah
			jsr   escnum
			jsr   retardo
			lda	  #%00000010
			sta	  PTAD
			lda	  horal
			jsr   escnum
			jsr   retardo
			lda	  #%00000100
			sta	  PTAD
			lda	  minh
			jsr   escnum
			jsr   retardo
			lda	  #%00001000
			sta	  PTAD
			lda	  minl
			jsr   escnum
			jsr   retardo
			jmp   escfin	

escnum:		cmp	  #$00
			beq   esc0
n1:			cmp	  #$01
			beq   esc1
n2:			cmp	  #$02
			beq   esc2
n3:			cmp	  #$03
			beq   esc3
n4:			cmp	  #$04
			beq   esc4
n5:			cmp	  #$05
			beq   esc5
n6:			cmp	  #$06
			beq   esc6
n7:			cmp	  #$07
			beq   esc7
n8:			cmp	  #$08
			beq   esc8
n9:			cmp	  #$09
			beq   esc9
nf:			rts	
		
;23456789012345678901234567890123456789012345
esc0:       lda   PTBD 			;Escribir 8b0000xxxx
			and   #%00001111
			sta	  PTBD	
			jmp   n1
				
esc1: 		lda   PTBD 			;Escribir 8b0001xxxx
			and   #%00001111
			ora   #%00010000
			sta	  PTBD	
			jmp   n2
			
esc2:		lda   PTBD 			;Escribir 8b0010xxxx
			and   #%00001111
			ora   #%00100000
			sta	  PTBD	
			jmp   n3
 
esc3:		lda   PTBD 			;Escribir 8b0011xxxx
			and   #%00001111
			ora   #%00110000
			sta	  PTBD	
			jmp   n4
			
esc4:		lda   PTBD 			;Escribir 8b0100xxxx
			and   #%00001111
			ora   #%01000000
			sta	  PTBD	
			jmp   n5
 
esc5:		lda   PTBD 			;Escribir 8b0101xxxx
			and   #%00001111
			ora   #%01010000
			sta	  PTBD	
			jmp   n6
 
esc6:		lda   PTBD 			;Escribir 8b0110xxxx
			and   #%00001111
			ora   #%01100000
			sta	  PTBD	
			jmp   n7
 
esc7:		lda   PTBD 			;Escribir 8b0111xxxx
			and   #%00001111
			ora   #%01110000
			sta	  PTBD	
			jmp   n8
 
esc8: 		lda   PTBD 			;Escribir 8b1000xxxx
			and   #%00001111
			ora   #%10000000
			sta	  PTBD	
			jmp   n9
	
esc9: 		lda   PTBD 			;Escribir 8b1000xxxx
			and   #%00001111
			ora   #%10010000
			sta	  PTBD	
			jmp   nf

verif:							;Función para verificar el estado de las entradas de los pulsadores
			lda	  #%00000001	;Verificación de cambios en el pulsador1 PTB0 
			and   PTBD
			cmp	  #%00000000
			beq	  aug1			
			bne	  verack1 
v1:			lda	  #%00000010	;Verificación de cambios en el pulsador2 PTB1 
			and   PTBD
			cmp	  #%00000000
			beq	  aug2
			bne	  verack2 	
v2:			lda	  #%00000100	;Verificación de cambios en el pulsador3 PTB2 
			and   PTBD
			cmp	  #%00000000
			beq	  aug3
			bne	  verack3 	
v3:			lda	  #%00001000	;Verificación de cambios en el pulsador4 PTB3 
			and   PTBD
			cmp	  #%00000000
			beq	  aug4
			bne	  verack4 			
veriffin:	rts
								; Para el pulsador 1
aug1:		lda   acka			;Verificación para evitar repetición de aumento del registro
			cmp	  #$00
			beq   a1	
aug1r:		jmp   v1
								; Para el pulsador 2:
aug2:		lda   #$00			;Verificación para evitar repetición de aumento del registro
			cmp	  ackb
			beq   a2	
aug2r:		jmp   v2
								; Para el pulsador 3:
aug3:		lda   ack3			;Verificación para evitar repetición de aumento del registro
			cmp	  #$00	
			beq   a3	
aug3r:		jmp   v3
								; Para el pulsador 4:
aug4:		lda   ackd			;Verificación para evitar repetición de aumento del registro
			cmp	  #$00
			beq   a4	
aug4r:		jmp   veriffin
verack1:    lda   acka			;subrutina de limpieza de acknoledge para el pulsador dado
			cmp	  #$01
			beq   vack1
			bne	  v1
verack1r:	jmp	  v1
verack2:    lda   ackb			;subrutina de limpieza de acknoledge para el pulsador dado
			cmp	  #$01	
			beq   vack2
			bne	  v2
verack2r:	jmp	  v2
verack3:    lda   ack3			;subrutina de limpieza de acknoledge para el pulsador dado
			cmp	  #$01
			beq   vack3
			bne	  v3
verack3r:	jmp	  v3
verack4:    lda   ackd		;subrutina de limpieza de acknoledge para el pulsador dado
			cmp	  #$01
			beq   vack4
			bne   veriffin
verack4r:	jmp	  veriffin
vack1:		lda   #$00
			sta	  acka
			jmp	  verack1r
vack2:		lda   #$00
			sta	  ackb
			jmp	  verack2r
vack3:		lda   #$00
			sta	  ack3
			jmp	  verack3r
vack4:		lda   #$00
			sta	  ackd
			jmp	  verack4r
a1:         lda   estado		;subrutina de selección de registro para aumento según estado
			cmp	  #$01
			beq	  a1fecha
			bne	  a1hora	  
a1r:		jmp	  aug1r
a2:         lda   estado		;subrutina de selección de registro para aumento según estado
			cmp	  #$01
			beq	  a2fecha
			bne	  a2hora	  
a2r:		jmp	  aug2r
a3:         lda   estado		;subrutina de selección de registro para aumento según estado
			cmp	  #$01
			beq	  a3fecha
			bne	  a3hora	  
a3r:		jmp	  aug3r
a4:         lda   estado		;subrutina de selección de registro para aumento según estado
			cmp	  #$01
			beq	  a4fecha
			bne	  a4hora	  
a4r:		jmp	  aug4r
a1fecha:	lda	  mesh			;subrutina de aumento del registro fecha para el pin dado
			add	  #$01
			sta	  mesh	
			lda   #$01
			sta	  acka
			jmp   a1r
a1hora:		lda	  horah			;subrutina de aumento del registro hora para el pin dado
			add	  #$01
			sta	  horah	
			lda   #$01
			sta	  acka
			jmp   a1r
a2fecha:	lda	  mesl			;subrutina de aumento del registro fecha para el pin dado
			add	  #$01
			sta	  mesl	
			lda   #$01
			sta	  ackb
			jmp   a2r
a2hora:		lda	  horal			;subrutina de aumento del registro hora para el pin dado
			add	  #$01
			sta	  horal	
			lda   #$01
			sta	  ackb
			jmp   a2r
a3fecha:	lda	  diah			;subrutina de aumento del registro fecha para el pin dado
			add	  #$01
			sta	  diah	
			lda   #$01
			sta	  ack3
			jmp   a3r
a3hora:		lda	  minh			;subrutina de aumento del registro hora para el pin dado
			add	  #$01
			sta	  minh	
			lda   #$01
			sta	  ack3
			jmp   a3r
a4fecha:	lda	  dial			;subrutina de aumento del registro fecha para el pin dado
			add	  #$01
			sta	  dial	
			lda   #$01
			sta	  ackd
			jmp   a4r
a4hora:		lda	  minl			;subrutina de aumento del registro hora para el pin dado
			add	  #$01
			sta	  minl	
			lda   #$01
			sta	  ackd
			jmp   a4r
			
verif_digito:
			lda #10T			;carga 10 al acumulador
			cmp minl			;compara con minl
			bne	sr1				;si es diferente va a sr1
			lda #%0				;si minl==10
			sta	minl			;minl=0
			lda	minh			;carga minh al acumulador
			add	#%1				;suma 1 al acumulador
			sta minh			;carga a minh el acumulador
			
			lda #10T			;carga 10 al acumulador
			cmp dial			;compara con dial
			bne	sr1				;si es diferente va a sr1
			lda #%0				;si dial==10
			sta	dial			;dial=0
			lda	diah			;carga diah al acumulador
			add	#%1				;suma 1 al acumulador
			sta diah			;carga a diah el acumulador
			
			lda #10T			;carga 10 al acumulador
			cmp horal			;compara con horal
			bne	sr1				;si es diferente va a sr1
			lda #%0				;si horal==10
			sta	horal			;horal=0
			lda	horah			;carga horah al acumulador
			add	#%1				;suma 1 al acumulador
			sta horah			;carga a horah el acumulador
			
			lda #10T			;carga 10 al acumulador
			cmp mesl			;compara con mesl
			bne	sr1				;si es diferente va a sr1
			lda #%0				;si mesl==10
			sta	mesl			;mesl=0
			lda	mesh			;carga mesh al acumulador
			add	#%1				;suma 1 al acumulador
			sta mesh			;carga a mesh el acumulador
			
			lda #3T			    ;carga 3 al acumulador
			cmp diah			;compara con diah
			bne	sr1				;si es diferente va a sr1
			lda #%0				;si diah==3
			sta	diah			;diah=0
			lda	mesl			;carga mesl al acumulador
			add	#%1				;suma 1 al acumulador
			sta mesl			;carga a mesl el acumulador
			
			lda #6T			    ;carga 10 al acumulador
			cmp minh			;compara con minh
			bne	sr1				;si es diferente va a sr1
			lda #%0				;si minh==6
			sta	minh			;minh=0
			lda	horal			;carga horal al acumulador
			add	#%1				;suma 1 al acumulador
			sta horal			;carga a horal el acumulador
			jmp r1
			
sr1:		jmp r1
			
			
			
			

			
			
			
			




incDia0: 	lda		#9T			;Carga 9 al acumulador			
			cmp		dial		;compara con dia low
			beq		incDia1		;si dia low es 9 va a incDia1
			lda		dial		;carga dial al acumulador
			add		#$1			;suma 1 al acumulador
			sta		dial		;lo asigna a dial
			jsr		mainLoop	;vuelve al main
			
incDia1:	lda		$#0			;carga 0 al acumulador
			sta		dial		;lo asigna a dial 
			lda		#3T			;carga 3 al acumulador
			cmp		diah		;compara con diah	
			beq		incDia2		;si es igual va a incDia2
			lda		diah		;carga diah al acumulador
			add		#$1			;suma 1 al acumulador
			sta		diah		;lo asigna a diah
			jsr 	mainLoop	;vuelve al main
				
incDia2:	lda		#$0			;carga 0 al acumulador
			sta		diah		;lo asigna a diah
			jsr		incMes0		;salta a incMes0
			
incMes0:	lda		#9T			;carga 9 al acumulador
			cmp		mesl		;compara con mesl
			beq		incMes1		;si es igual salta a incMes1
			lda		mesl		;carga mesl al acumulador
			add		#$1		;suma 1 al acumulador
			sta		mesl		;carga el valor a mesl
			jsr		mainLoop	;vuelve al mainLoop
			
incMes1:	lda		$#0			;carga 0 en el acumulador
			sta		mesl		;lo asigna a mesl
			lda		#1T		;carga 1 en el acumulador
			beq		incMes2		;si es igual salta a incMes2
			lda		mesh		;carga mesh al acumulador
			add		#$1		;suma 1 al acumulador
			sta		mesh		;lo asigna a mesh
			jsr 	mainLoop		;vuelve al mainLoop
			
incMes2:	lda		#2T			;carga 2 al acumulador
			cmp		mesl		;compara con mesl
			blo		incMes3:	;si es menor salta a incMes3
			lda		#$0		;carga 0 al acumulador
			sta		mesl		;lo asigna a mesl
			sta		meh		;lo asigna a mesh
			jsr		mainLoop	;vuelve al mainLoop
			
incMes3:	lda		mesl			;carga mesl en el acumulador
			add		#$1		;suma 1 al acumulador
			sta		mesl		;lo carga en mesl
			jsr		mainLoop	;vuelve al mainLoop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;			
			
incMin0: 	lda		#9T			;Carga 9 al acumulador			
			cmp		minl		;compara con minl
			beq		incMin1		;si minl es 9 va a incMin1
			lda		minl		;carga minl al acumulador
			add		#$1		;suma 1 al acumulador
			sta		minl		;lo asigna a minl
			jsr		mainLoop	;vuelve al main
			
incMin1:	lda		$#0			;carga 0 al acumulador
			sta		minl		;lo asigna a minl 
			lda		#6T		;carga 6 al acumulador
			cmp		minh		;compara con minh	
			beq		incMin2		;si es igual va a incMin2
			lda		minh		;carga minh al acumulador
			add		#$1		;suma 1 al acumulador
			sta		minh		;lo asigna a minh
			jsr 	mainLoop	;vuelve al main
				
incMin2:	lda		#$0			;carga 0 al acumulador
			sta		minh		;lo asigna a minh
			jsr		incHora0	;salta a incHora0
			
incHora0:	lda		#9T			;carga 9 al acumulador
			cmp		horal		;compara con horal
			beq		incHora1	;si es igual salta a incHora1
			lda		horal		;carga horal al acumulador
			add		#$1		;suma 1 al acumulador
			sta		horal		;carga el valor a horal
			jsr		mainLoop	;vuelve al mainLoop
			
incHora1:	lda		$#0			;carga 0 en el acumulador
			sta		horal		;lo asigna a horal
			lda		#2T		;carga 2 en el acumulador
			beq		incHora2	;si es igual salta a incHora2
			lda		horah		;carga horah al acumulador
			add		#$1		;suma 1 al acumulador
			sta		horah		;lo asigna a horah
			jsr 	mainLoop		;vuelve al mainLoop
			
incHora2:	lda		#4T			;carga 4 al acumulador
			cmp		horal		;compara con horal
			blo		incHora3:	;si es menor salta a incHora3
			lda		#$0		;carga 0 al acumulador
			sta		horal		;lo asigna a horal
			sta		horah		;lo asigna a horah
			jsr		mainLoop	;vuelve al mainLoop
			
incHora3:	lda		mesl			;carga mesl en el acumulador
			add		#$1		;suma 1 al acumulador
			sta		horal		;lo carga en horal
			jsr		mainLoop	;vuelve al mainLoop
			
			
			
			
