;*******************************************************************
;* This stationery serves as the framework for a user application. *
;* For a more comprehensive program that demonstrates the more     *
;* advanced functionality of this processor, please see the        *
;* demonstration applications, located in the examples             *
;* subdirectory of the "Freescale CodeWarrior for HC08" program    *
;* directory.                                                      *
;*******************************************************************

; Include derivative-specific definitions
            INCLUDE 'derivative.inc'
            

; export symbols
            XDEF _Startup, main
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on
            
            
            
            XREF __SEG_END_SSTACK   ; symbol defined by the linker for the end of the stack


; variable/data section
MY_ZEROPAGE: SECTION  SHORT         ; Insert here your data definition
var1:       ds.b   1
var11:		ds.w	1	
datos:		SECTION
var2:		ds.b	1
var3:		ds.w	2
; code section
MyCode:     SECTION
main:
_Startup:
            LDHX   #__SEG_END_SSTACK ; initialize the stack pointer
            TXS
			CLI			; enable interrupts

mainLoop:
            ; Insert your code here
            lda     #2
            sta     var1
            sta		var2
            sta		var3
            
            
            clrh			;
            ldx		#$68	;
            sta		,X		; INDEXADO
            
            clrh			;
            ldx		#var1	; tomando var1 como un numero, no como direccion
            sta		,X		; INDEXADO
            
            sta		var1,X; va a guardar lo que este en el acumulador en la posicion #var1=60  +  lo que sea X
            
            clrh
            ldx		#02
            sta		var1,X
            
            
            ldx		#01
            sta		var11,X; escribe en la parte baja de la variable
            clrx
            sta		var11; escribe en la parte alta de la variable
            

            feed_watchdog
            BRA    mainLoop


