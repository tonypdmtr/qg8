;*******************************************************************
;* Universidad Nacional de Colombia                                *
;* Facultad de ingeniería mecánica y mecatrónica                   *
;* Microcontroladores 2018-I                                       *
;* Programador:                                                    *
;* -Javier Mauricio Pinilla Garcia  25481244                       *
;*                                                                 *
;* Version: 1.0                                                    *
;* Microcontrolador: MC9S08QG8CPBE                                 *
;* Codigo para leer un teclado 4x4 (sin la ultima columna          *
;* habilitada) a traves del uso de interrupciones KBI              *
;*******************************************************************

; Include derivative-specific definitions
            INCLUDE 'derivative.inc'
            

; export symbols
            XDEF _Startup, main, kbirutina
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on
            
            
            
            XREF __SEG_END_SSTACK   ; symbol defined by the linker for the end of the stack


; variable/data section
MY_ZEROPAGE: SECTION  SHORT         ; Insert here your data definition

numero:		ds.b   1	; numero pulsado
fkbi:		ds.b   1	; flag kbi
rowa:		ds.b   1	; row actual
row:		ds.b   1	; row activada cuando se dio la interrupcion
col:		ds.b   1   ; col activada cuando se dio la interrupcion

Javier:   SECTION



; ================= RUtina  de Interrupcion por KBI
kbirutina: 
        pshh
        bset	KBISC_KBACK,KBISC   ; Reconocimiento de int y forza la bandera a 0.
        bclr	KBISC_KBIE,KBISC
        bsr		delay1
        bsr 	delay1
        bsr 	delay1
        bsr 	delay1
        lda		PTAD
        sta		col

loop1:  brset 0,PTAD,loop1 
        brset 1,PTAD,loop1	
        brset 2,PTAD,loop1
        
        lda rowa
        sta	row
		lda #$01
		sta	fkbi
		

kbi_fin:
		 
		
		bset KBISC_KBIE,KBISC
		pulh
		rti
		
MyCode:     SECTION
main:
_Startup:
            LDHX   #__SEG_END_SSTACK ; initialize the stack pointer
            TXS
            
            lda   #$52
			sta   SOPT1 ; Desactivar watchdog y BKGD como PTA4
			lda	  #$00
			sta	  fkbi
			sta	  row
			sta	  rowa
			lda		#$0A
            sta  	numero
			
			lda		#%11111000 ; Puertos de lectura, columnas
			;		  ||||||||_col 1
            ;		  |||||||__col 2
            ;         ||||||___col 3 
            sta		PTADD
            lda		#%00000111 ; pull up puertos de lectura
            ;		  ||||||||_col 1
            ;		  |||||||__col 2
            ;         ||||||___col 3
            ;sta		PTAPE
            
            lda	    #%00001111 ; Puertos de escritura
            ;		  ||||||||_row 1
            ;		  |||||||__row 2
            ;         ||||||___row 3
            ;		  |||||____row 4			
            sta		PTBDD
            jsr		kbi_conf
			
			CLI			; enable interrupts

mainLoop:	
			lda #$01
			cmp fkbi
			beq ver0

rows:
            NOP
			lda		#%00000001	;row 1 = 1
			sta		PTBD
			lda     #$01
			sta		rowa
			
			NOP
			lda		#%00000010	;row 2 = 1
			sta		PTBD
			lda     #$02
			sta		rowa
			
			NOP
			lda		#%00000100	;row 3 = 1
			sta		PTBD
			lda     #$03
			sta		rowa
			
			NOP
			lda		#%00001000	;row 4 = 1
			sta		PTBD
			lda     #$04
			sta		rowa

            BRA    mainLoop
            
ver0:
			lda		#$01
			cmp		row
			bne		ver1
			brset	0,col,num1	;col 1 = 1
			brset	1,col,num2	;col 2 = 1
			brset	2,col,num3	;col 3 = 1
			BRA     clrfkbi
			
ver1:		NOP
			lda		#$02
			cmp		row
			bne		ver2
			brset	0,col,num4	;col 1 = 1
			brset	1,col,num5	;col 2 = 1
			brset	2,col,num6	;col 3 = 1
			BRA    clrfkbi

ver2:		lda		#$03
			cmp		row
			bne		ver3
			brset	0,col,num7	;col 1 = 1
			brset	1,col,num8	;col 2 = 1
			brset	2,col,num9	;col 3 = 1
            BRA    clrfkbi
            
ver3:			
			brset	1,col,num0	;col 1 = 1
			BRA    clrfkbi

			
num1:		lda		#$01
			sta		numero
			bra 	clrfkbi
			
num2:		lda		#$02
			sta		numero
			bra 	clrfkbi
			
num3:		lda		#$03
			sta		numero
			jmp 	clrfkbi
			
num4:		lda		#$04
			sta		numero
			jmp 	clrfkbi
			
num5:		lda		#$05
			sta		numero
			jmp 	clrfkbi

num6:		lda		#$06
			sta		numero
			jmp 	clrfkbi
			
num7:		lda		#$07
			sta		numero
			jmp 	clrfkbi
			
num8:		lda		#$08
			sta		numero
			jmp 	clrfkbi
			
num9:		lda		#$09
			sta		numero
			jmp 	clrfkbi
			
num0:		lda		#$00
			sta		numero
			jmp 	clrfkbi

clrfkbi:	
			lda		#$00
			sta		fkbi
			jmp 	mainLoop			
			
 ;***********************************************************************************;
 ;			                 Configuracion del KBI                       ;   
 ;                                                                                   ;
 ; KBISC_MOD= 1b1 --> detecta flanco y nivel                                         ;
 ;                                                                                   ;
 ; PTAPE = #%00000111 --> activa dispositivo de pull up en pines KBI a usar          ;
 ;                                                                                   ;
 ; KBIES = FF --> selecciona resistencia de pull down, la interrupcion               ;
 ;                se activa con un 1 en el pin                                       ;
 ;                                                                                   ;
 ;***********************************************************************************;           
kbi_conf:
			lda	  #%00000001
			sta	  KBISC		;1 IE=0, MOD=1
			lda	  #$FF
			sta	  KBIES		;2 Seleccionar pull up/down 0/1 activa con 0/activa con 1
			
			lda   #%00000111
			sta   PTAPE		;3 Configurar pullup de los pines a usar
			lda   #%00000111
			sta	  KBIPE		;4 Configurar pines KBI a usar
			lda	  KBISC
			ora	  #%00000100
			sta	  KBISC		;5 ACK=1
			lda	  KBISC
			ora	  #%00000011
			sta	  KBISC		;6 IE=1, MOD=1
			rts
            

delay1: 	
			lda		#$01
rt11:		psha
			lda		#$ff
rt22:		dbnza	rt22
			pula
			dbnza	rt11
			rts
